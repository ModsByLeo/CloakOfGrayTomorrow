plugins {
	id 'maven-publish'
	id 'org.quiltmc.loom' version '0.12.+'
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = "https://ladysnake.jfrog.io/artifactory/mods"
	}
	maven {
		url "https://repo.unascribed.com"
		content {
			includeGroup "com.unascribed"
		}
	}
}

// All dependency versions are declared in the gradle.properties file
dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:v2"))
	})
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api_version}-${minecraft_version}"
	// If you want to use QSL by itself over Quilted Fabric API, uncomment the line below (and comment out the line above):
	// 	modImplementation "org.quiltmc:qsl:${qsl_version}+${minecraft_version}"

	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}"
	modImplementation("dev.emi:trinkets:${trinkets_version}") {
		exclude group: "com.terraformersmc", module: "modmenu"
	}
	compileOnly "com.unascribed:ears-api:${ears_api_version}"
}

if (Boolean.valueOf(project.use_runtime_deps)) {
	repositories {
		maven {
			name = "JitPack"
			url = "https://jitpack.io"
			content {
				includeGroupByRegex "com\\.github\\..*"
			}
		}
		maven {
			name = "Modrinth Maven"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroupByRegex "maven\\.modrinth"
			}
		}
	}

	dependencies {
		// DataBreaker applies a number of patches to eliminate the loading of data fixers
		// This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
		// NOTE crashes because of QSL's DFU module (oops!)
		//modRuntimeOnly "supercoder79:databreaker:${project.databreaker_version}"
		// LazyDFU as an alternative to DataBreaker
		modRuntimeOnly "maven.modrinth:lazydfu:${project.lazydfu_version}"
		// JellySquid's elemental optimizations (and Starlight)
		// NOTE incompatible with 1.19.2
		//modRuntimeOnly "maven.modrinth:lithium:${project.lithium_version}"
		//modRuntimeOnly "maven.modrinth:starlight:${project.starlight_version}"
		//modRuntimeOnly "maven.modrinth:sodium:${project.sodium_version}"
		//runtimeOnly 'org.joml:joml:1.10.4' // needed for Sodium
	}
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
